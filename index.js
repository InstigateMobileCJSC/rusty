// Generated by CoffeeScript 1.9.3
(function() {
  var Canvas, NodeTtl, captcha, crypto, luminance, pickRandom, ttl;

  Canvas = require('canvas');

  NodeTtl = require('node-ttl');

  crypto = require('crypto');

  ttl = new NodeTtl();

  pickRandom = function(items) {
    return items[Math.floor(Math.random() * items.length)];
  };

  luminance = function(hex, lum) {
    return hex.match(/.{1,2}/g).map(function(c) {
      c = parseInt(c, 16) * (1 + lum);
      c = c < 0 ? 0 : c > 255 ? 255 : c;
      c = Math.round(c).toString(16);
      return ("00" + c).substr(c.length);
    }).join('');
  };

  captcha = function(arg) {
    var _color, background, canvas, cellWidth, char, chars, code, color, ctx, fonts, height, i, j, k, l, length, noise, ref, ref1, ref2, width, x, y;
    height = arg.height, width = arg.width, length = arg.length, color = arg.color, background = arg.background, chars = arg.chars, fonts = arg.fonts, noise = arg.noise;
    chars = (chars || 'abcdefghijklmnopqrstuvwxyz0123456789').match(/.{1}/g);
    if (length == null) {
      length = 4;
    }
    if (width == null) {
      width = 125;
    }
    if (height == null) {
      height = 50;
    }
    if (color == null) {
      color = '#888888';
    }
    _color = color.substr(1);
    if (background == null) {
      background = "#ffffff";
    }
    if (fonts == null) {
      fonts = ['20px sans', '20px arial', 'bold 20px arial', 'italic 20px sans'];
    }
    noise = (noise || 90) * 0.01 - 0.5;
    canvas = new Canvas(width, height);
    ctx = canvas.getContext('2d');
    ctx.fillStyle = background;
    ctx.fillRect(0, 0, width, height);
    ctx.fillStyle = ctx.strokeStyle = color;
    code = '';
    cellWidth = width / length;
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      char = pickRandom(chars);
      code += char;
      ctx.font = pickRandom(fonts);
      ctx.setTransform(Math.random() * 0.4 + 1, Math.random() * 0.5, Math.random() * 0.5, Math.random() * 0.6 + 1, cellWidth * i + cellWidth * 0.4, height * 0.6);
      ctx.fillStyle = "#" + (luminance(_color, Math.random() * 0.1));
      ctx.fillText(char, 0, 0);
    }
    ctx.globalCompositeOperation = 'lighter';
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    for (x = k = 0, ref1 = Math.ceil(width * 0.5); 0 <= ref1 ? k < ref1 : k > ref1; x = 0 <= ref1 ? ++k : --k) {
      for (y = l = 0, ref2 = Math.ceil(height * 0.5); 0 <= ref2 ? l < ref2 : l > ref2; y = 0 <= ref2 ? ++l : --l) {
        if (Math.random() < noise) {
          ctx.fillStyle = "#" + (luminance(_color, Math.random()));
          ctx.fillRect(x * 2, y * 2, 2, 2);
        }
      }
    }
    return {
      canvas: canvas,
      code: code
    };
  };

  exports.captcha = captcha;

  exports.middleware = function(options) {
    return function(req, res) {
      var canvas, code, hash, ref;
      ref = captcha(options), canvas = ref.canvas, code = ref.code;
      hash = crypto.randomBytes(16).toString('hex');
      ttl.push(hash, code, null, 120);
      res.setHeader('X-Captcha', hash);
      return canvas.toDataURL(function(err, str) {
        return res.end(str);
      });
    };
  };

  exports.verifyCaptcha = function(req, res, next) {
    req.verifyCaptcha = function(key, input) {
      var _captcha;
      _captcha = ttl.get(key);
      ttl.del(key);
      return _captcha && _captcha === input;
    };
    return next();
  };

}).call(this);
